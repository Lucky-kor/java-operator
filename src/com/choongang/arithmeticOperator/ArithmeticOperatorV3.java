package com.choongang.arithmeticOperator;

/**
 * 나눗셈 연산자를 사용할 때, 좌항과 우항이 모두 `int`형이면 그 결과도 `int`형이기 때문에
 * 소수점 이하의 값은 버려지고, 오직 몫만 결과로 반환됩니다.
 *
 * 반면, 좌항이나 우항 중 하나라도 실수 타입의 값이 존재한다면,
 * 실수 타입이 아닌 값도 실수 타입으로 자동으로 형변환되어 계산되며,
 * 결과적으로 실수 간의 나눗셈 연산이 되어 소수점이 버려지지 않은 온전한 값이 결과값으로 반환됩니다.
 */
public class ArithmeticOperatorV3 {
    public static void main(String[] args) {
        // 두 정수의 나눗셈 연산입니다. 9를 2로 나누면 결과는 4.5이지만,
        // 두 피연산자 모두 정수이므로 결과는 정수 부분만 반환됩니다.
        // 이 때, 결과는 실제 정수 값인 4입니다. 그러나, 결과를 담는 변수가 double형이므로,
        // 최종적으로 num1 변수에 저장되는 값은 4.0이 됩니다.
        double num1 = 9 / 2;   // 4.0

        // 여기서도 두 정수의 나눗셈 연산입니다. 위의 설명과 동일하게,
        // 9를 2로 나눈 정수 결과는 4입니다. 이번에는 결과를 담는 변수도 int형이므로,
        // num2 변수에는 정확히 4가 저장됩니다.
        int    num2 = 9 / 2;   // 4

        // 이 연산에서는 하나의 피연산자가 부동소수점 수(9.0)입니다.
        // Java에서는 하나라도 부동소수점 수가 연산에 포함되면 결과도 부동소수점 수로 계산됩니다.
        // 따라서, 9.0을 2로 나눈 결과는 정확히 4.5가 됩니다. 이 값이 num3 변수에 저장됩니다.
        double num3 = 9.0 / 2; // 4.5
    }
}
